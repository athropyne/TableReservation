"""init tables

Revision ID: c8389a1334e6
Revises: 
Create Date: 2025-04-09 02:05:31.900907

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'c8389a1334e6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tables',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('name', sa.String(length=20), nullable=False),
                    sa.Column('seats', sa.Integer(), nullable=False),
                    sa.Column('location', sa.String(length=200), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('reservations',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('customer_name', sa.String(length=100), nullable=False),
                    sa.Column('table_id', sa.Integer(), nullable=False),
                    sa.Column('reservation_time', sa.DateTime(), nullable=False),
                    sa.Column('duration_minutes', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['table_id'], ['tables.id'], onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###

    op.execute("""
    CREATE OR REPLACE FUNCTION check_reservation_overlap()
    RETURNS TRIGGER AS $$
    BEGIN
        IF EXISTS (
            SELECT 1 FROM reservations
            WHERE table_id = NEW.table_id
            AND id != COALESCE(NEW.id, -1)
            AND tstzrange(reservation_time, 
                         reservation_time + (duration_minutes * INTERVAL '1 minute')) 
               && tstzrange(NEW.reservation_time, 
                           NEW.reservation_time + (NEW.duration_minutes * INTERVAL '1 minute'))
        ) THEN
            RAISE EXCEPTION 'Table is already reserved for this time slot (Table ID: %)', NEW.table_id;
        END IF;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """)

    op.execute("""
    CREATE TRIGGER reservation_overlap_trigger
    BEFORE INSERT OR UPDATE ON reservations
    FOR EACH ROW EXECUTE FUNCTION check_reservation_overlap();
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TRIGGER IF EXISTS reservation_overlap_trigger ON reservations")
    op.execute("DROP FUNCTION IF EXISTS check_reservation_overlap()")
    op.drop_table('reservations')
    op.drop_table('tables')
    # ### end Alembic commands ###
